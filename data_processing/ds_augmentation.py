import numpy as np
from scipy.stats import norm
import tensorflow as tf
import tensorflow_addons as tfa


def value_augmentation_spot_light(shape, value, strength_spot):
    shape = shape.numpy()

    uniform_value_diff = np.random.uniform(-value, value)
    mask = np.zeros(shape)
    mask[:, :, 2] = uniform_value_diff
    strength = np.random.uniform(0.0, strength_spot)
    mask_raw = generate_spot_light_mask(mask_size=(shape[1], shape[0]))
    mask[:, :, 2] = mask[:, :, 2] + strength * mask_raw
    mask[:, :, 1] = -strength * mask_raw
    return mask

def augment_mapping(datapoint, rng, aug_param):
    if aug_param["blur"]:
        sigma = np.random.uniform(0, aug_param["sigma"])
        datapoint['in_img'] = tfa.image.gaussian_filter2d(datapoint['in_img'], (5, 5), sigma)

    if aug_param["noise_std"] != 0:
        datapoint['in_img'] = tf.cast(datapoint['in_img'], tf.float32)
        datapoint['in_img'] = tf.keras.layers.GaussianNoise(aug_param["noise_std"])(datapoint['in_img'], training=True)
        datapoint['in_img'] = tf.clip_by_value(datapoint['in_img'], 0, 255.0)
        datapoint['in_img'] = tf.cast(datapoint['in_img'], tf.uint8)

    seed = rng.make_seeds(2)[0]
    datapoint['in_img'] = tf.image.stateless_random_contrast(datapoint['in_img'], aug_param["contrast_factor"], 1 / aug_param["contrast_factor"], seed)
    seed = rng.make_seeds(2)[0]
    datapoint['in_img'] = tf.image.stateless_random_brightness(datapoint['in_img'], aug_param["brightness"], seed)

    seed = rng.make_seeds(2)[0]
    datapoint['in_img'] = tf.image.stateless_random_hue(datapoint['in_img'], aug_param["hue"], seed)
    seed = rng.make_seeds(2)[0]
    datapoint['in_img'] = tf.image.stateless_random_saturation(datapoint['in_img'], aug_param["saturation"],
                                                            1 / aug_param["saturation"], seed)
    seed = rng.make_seeds(2)[0]

    # convert to HSV
    # datapoint['in_img'] = tf.image.convert_image_dtype(datapoint['in_img'], tf.float32)
    # datapoint['in_img'] = tf.image.rgb_to_hsv(datapoint['in_img'])
    #
    # mask = tf.py_function(value_augmentation_spot_light,
    #                       inp=[datapoint['in_img'].shape, aug_param["value"], aug_param["strength_spot"]], Tout=tf.float32)
    # gaussian_noise = tf.random.stateless_uniform([1], seed, minval=0, maxval=aug_param["gaussian_value"])
    # mask = tf.keras.layers.GaussianNoise(gaussian_noise)(mask, training=True)
    # datapoint['in_img'] = mask + datapoint['in_img']
    # datapoint['in_img'] = tf.clip_by_value(datapoint['in_img'], 0.0, 1.0)
    #
    # # convert back to RGB of uint8: [0,255]
    # datapoint['in_img'] = tf.image.hsv_to_rgb(datapoint['in_img'])
    # datapoint['in_img'] = tf.image.convert_image_dtype(datapoint['in_img'], tf.uint8, saturate=True)

    # seed = rng.make_seeds(2)[0]
    # for key in datapoint.keys():
    #     if 'VERT' not in key:
    #         datapoint[key] = tf.image.stateless_random_flip_left_right(datapoint[key], seed)
    #         if seed[0] > 5:
    #             print("x")

    # seed = rng.make_seeds(2)[0]
    # for key in datapoint.keys():
    #     if 'VERT' not in key:
    #         datapoint[key] = tf.image.stateless_random_flip_up_down(datapoint[key], seed)

    return datapoint

def generate_spot_light_mask(mask_size, position=None, max_brightness=255, min_brightness=0, ):
    """
    Generate decayed light mask generated by spot light given position, direction. Multiple spotlights are accepted.
    Args:
        mask_size: tuple of integers (w, h) defining generated mask size
        position: list of tuple of integers (x, y) defining the center of spotlight light position,
                  which is the reference point during rotating
        max_brightness: integer that max brightness in the mask
        min_brightness: integer that min brightness in the mask
    Return:
        light_mask: ndarray in float type consisting value from max_brightness to min_brightness. If in 'linear' mode
                    minimum value could be smaller than given min_brightness.
    """
    if position is None:
        position = [(np.random.randint(0, mask_size[0]), np.random.randint(0, mask_size[1]))]
    mask = np.zeros(shape=(mask_size[1], mask_size[0]), dtype=np.float32)
    mu = np.sqrt(mask.shape[0] ** 2 + mask.shape[1] ** 2)
    # dev = mu / 3.5
    dev = mu / 7
    mask = _decay_value_radically_norm_in_matrix(mask_size, position, max_brightness, min_brightness, dev)
    # mask = np.asarray(mask, dtype=np.uint8)
    # add median blur
    # mask = cv2.medianBlur(mask, 5)
    # mask = 255 - mask
    # cv2.imshow("mask", mask)
    # cv2.waitKey(0)
    return mask


def _decay_value_radically_norm_in_matrix(mask_size, centers, max_value, min_value, dev):
    """
    _decay_value_radically_norm function in matrix format
    """
    center_prob = norm.pdf(0, 0, dev)
    x_value_rate = np.zeros((mask_size[1], mask_size[0]))
    for center in centers:
        coord_x = np.arange(mask_size[0])
        coord_y = np.arange(mask_size[1])
        xv, yv = np.meshgrid(coord_x, coord_y)
        dist_x = xv - center[0]
        dist_y = yv - center[1]
        dist = np.sqrt(np.power(dist_x, 2) + np.power(dist_y, 2))
        x_value_rate += norm.pdf(dist, 0, dev) / center_prob
    mask = x_value_rate * (max_value - min_value) + min_value
    mask[mask > 255] = 255
    return mask / 255.0


def _decay_value_radically_norm(x, centers, max_value, min_value, dev):
    """
    Calculate point value decayed from center following Gaussian decay. If multiple centers are given, value
    from each center sums up while limiting the accumulated value into [0, 255]
    NOTE: assuming light at each center is identical: same brightness and same decay rate
    """
    center_prob = norm.pdf(0, 0, dev)
    x_value_rate = 0
    for center in centers:
        distance = np.sqrt((center[0] - x[0]) ** 2 + (center[1] - x[1]) ** 2)
        x_value_rate += norm.pdf(distance, 0, dev) / center_prob
    x_value = x_value_rate * (max_value - min_value) + min_value
    x_value = 255 if x_value > 255 else x_value
    return x_value
